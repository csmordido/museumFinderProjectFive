{"version":3,"sources":["Components/Form.js","Components/DisplayMuseumsList.js","Components/DisplayMuseumDetails.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleChange","event","onTextInputChange","target","value","handleSubmit","onFormSubmit","bind","onSubmit","this","type","placeholder","onChange","Component","DisplayMuseumsList","handleClick","e","xid","currentTarget","getAttribute","axios","url","method","responseType","params","apikey","then","response","newMuseumDetails","push","data","onDataUpdate","data-xid","museumXid","onClick","className","museumName","DisplayMuseumDetails","imgDetail","nameDetail","addressDetail","urlDetail","infoDetail","house_number","road","city","state","postcode","country","src","alt","href","App","preventDefault","key","name","userInput","longitude","lon","latitude","lat","updateMuseumsData","setState","radius","kinds","rate","format","limit","newMuseumsData","forEach","obj","museumsData","museumDetails","updateMuseumDetails","newData","map","preview","source","address","wikipedia_extracts","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa659597.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = (event) => {\n    this.props.onTextInputChange(event.target.value);\n  } \n\n  handleSubmit = (event) => {\n    this.props.onFormSubmit(event);\n  } \n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}> \n        <input value={this.props.value} type=\"text\" placeholder=\"Enter City\" onChange={this.handleChange} />\n        <input type=\"submit\" value=\"Search\" />\n      </form>\n    )\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass DisplayMuseumsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = e => {\n    const xid = e.currentTarget.getAttribute('data-xid');\n    const key = '5ae2e3f221c38a28845f05b6c25ce5d3be16ef238b3cedc588767b71';\n    axios({\n      url: `https://api.opentripmap.com/0.1/en/places/xid/${xid}`,\n      method: 'GET',\n      responseType: 'JSON',\n      params: {\n        apikey: key,\n      }\n    }).then(response => {\n      const newMuseumDetails = [];\n      newMuseumDetails.push(response.data);\n      this.props.onDataUpdate(newMuseumDetails);\n    })\n  }\n\n  render () {\n    return (\n      <li data-xid={this.props.museumXid} onClick={this.handleClick}>\n        <span><i className=\"fas fa-landmark\"></i></span>\n        <h2>{this.props.museumName}</h2>\n      </li>\n    )\n  }\n}\n\nexport default DisplayMuseumsList;","import React from 'react';\n\nconst DisplayMuseumDetails = ({imgDetail, nameDetail, addressDetail, urlDetail, infoDetail}) => {\n\n  const {house_number, road, city, state, postcode, country} = addressDetail;\n\n  return (\n    <section className=\"museumDetails\">\n      <div className=\"museumImg\">\n        <img src={imgDetail} alt={nameDetail}/>\n      </div>\n      <div className=\"museumInfo\">\n        <h2>{nameDetail}</h2>\n        <address>{house_number} {road}, {city}, {state}, {postcode} {country}</address>\n        <a href={urlDetail}>Visit {nameDetail}'s website</a>\n        <p>{infoDetail}\n        </p>\n        <button type=\"button\">Go back to list</button>\n      </div>\n    </section>\n  )\n}\n\nexport default DisplayMuseumDetails;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Form from './Components/Form';\nimport DisplayMuseumsList from './Components/DisplayMuseumsList';\nimport DisplayMuseumDetails from './Components/DisplayMuseumDetails';\n\nclass App extends Component {\n  constructor () {\n    super();\n\n    this.state = {\n      userInput: '',\n      museumsData: [],\n      museumDetails: [],\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateMuseumDetails = this.updateMuseumDetails.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      userInput: event,\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const key = '5ae2e3f221c38a28845f05b6c25ce5d3be16ef238b3cedc588767b71';\n    axios({\n      url: 'https://api.opentripmap.com/0.1/en/places/geoname',\n      method: 'GET',\n      responseType: 'JSON',\n      params: {\n        name: this.state.userInput,\n        apikey: key,\n      }\n    }).then( response => {\n      const longitude = response.data.lon;\n      const latitude = response.data.lat;\n      this.updateMuseumsData(longitude, latitude, key);\n    })\n    this.setState({\n      userInput: '',\n    })\n    // fadeOut('form');\n  }\n\n  updateMuseumsData = (lon, lat, key) => {\n    axios({\n      url: 'https://api.opentripmap.com/0.1/en/places/radius',\n      method: 'GET',\n      responseType: 'JSON',\n      params: {\n        radius: 100000,\n        lon: lon,\n        lat: lat,\n        kinds: 'museums',\n        rate: '3',\n        format: 'json',\n        limit: 10,\n        apikey: key,\n      }\n    }).then( (response) => {\n      const newMuseumsData = [];\n      response.data.forEach( obj => {\n        newMuseumsData.push(obj);\n      });\n      this.setState({\n        museumsData: newMuseumsData,\n      });     \n    })\n  }\n\n  updateMuseumDetails(newData) {\n    this.setState({\n      museumDetails: newData,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1>Museum <span>Finder</span></h1>\n        </header>\n        <main className=\"wapper\">\n          <Form \n            onTextInputChange={this.handleChange} \n            value={this.state.userInput}\n            onFormSubmit={this.handleSubmit}\n          />\n          <section className=\"museumsList\">\n            <ul>\n              {\n                this.state.museumsData.map( obj => {\n                  return (\n                    <DisplayMuseumsList \n                      key={obj.xid}\n                      museumName={obj.name} \n                      museumXid={obj.xid}\n                      onDataUpdate={this.updateMuseumDetails}\n                    />\n                  )\n                })\n              }\n            </ul>\n          </section>\n          {\n            this.state.museumDetails.map( obj => {\n              return (\n                <DisplayMuseumDetails \n                  key={obj.xid}\n                  imgDetail={obj.preview.source}\n                  nameDetail={obj.name}\n                  addressDetail={obj.address}\n                  urlDetail={obj.url}\n                  infoDetail={obj.wikipedia_extracts.text}\n                />\n              )\n            })\n          }\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}