{"version":3,"sources":["assets/logo.svg","Components/Header.js","Components/Form.js","Components/CityHeader.js","Components/scrollToElement.js","Components/CityMuseums.js","Components/CityData.js","firebase.js","Components/MuseumDetails.js","Components/ErrorMessage.js","Components/SavedModal.js","Components/Saved.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","fill","_ref","svgRef","title","props","enableBackground","height","viewBox","width","ref","ForwardRef","forwardRef","Header","className","Form","useState","userInput","setUserInput","handleSubmit","event","a","preventDefault","axios","url","method","responseType","params","name","apikey","process","response","cityData","data","country","lat","lon","setCityData","console","log","setHasError","onSubmit","htmlFor","id","value","type","placeholder","onChange","CityHeader","weatherData","setWeatherData","getWeatherData","units","appid","cityTemp","Math","round","main","temp","description","weather","useEffect","scrollToElement","elementId","document","getElementById","scrollIntoView","behavior","CityMuseums","cityMuseums","setCityMuseums","getMuseumsList","radius","kinds","rate","format","limit","newCityMuseums","push","cityMuseumsCopy","map","object","xid","onClick","setXid","setIsHidden","CityData","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MuseumDetails","museumDetails","setMuseumDetails","getMuseumDetails","newMuseumDetails","address","img","preview","siteUrl","info","wikipedia_extracts","text","backToList","setTimeout","addMuseum","dbRef","database","modObject","JSON","parse","stringify","museumDetailsCopy","item","src","alt","house_number","road","city","state","postcode","href","ErrorMessage","SavedModal","closeModal","Saved","museums","setMuseums","on","newMuseums","val","museumsCopy","firebaseKey","child","remove","filter","openModal","country_code","toUpperCase","Nav","setSavedIsHidden","savedIsHidden","App","isHidden","hasError","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d338829.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"m42.933 1.219c-1.551 1.55-19.933 19.619-19.933 19.619s-18.382-18.069-19.933-19.619c-2.742-2.742-3.067 0-3.067 0v41h23 23v-41c0 0-.325-2.742-3.067 0z\",\n  fill: \"#b0b0b0\"\n});\n\nvar SvgLogo = function SvgLogo(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    enableBackground: \"new 0 0 46 42.219\",\n    height: 16.55,\n    viewBox: \"0 0 46 42.219\",\n    width: 46,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgLogo, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/logo.f301e47d.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport { ReactComponent as Logo } from '../assets/logo.svg';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Museum <span><Logo className='logo'/>Finder</span></h1>\n    </header>\n  )\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst Form = (props) =>  {\n\n  // State tracking the user input.\n  const [userInput, setUserInput] = useState(\"\");\n\n  // On form submit\n  const handleSubmit = async (event) => {\n\n    // prevent the default page refresh event\n    event.preventDefault();\n  \n    try {\n      // make an API request to get data on the user inputted city and wait for the promise to be fulfilled\n      const response = await axios({\n        url: 'https://api.opentripmap.com/0.1/en/places/geoname',\n        method: 'GET',\n        responseType: 'JSON',\n        params: {\n          name: userInput,\n          apikey: process.env.REACT_APP_OTM_KEY,\n        }\n      });\n  \n      // organize the needed data from the API response in an object\n      const cityData = {\n        name: response.data.name,\n        country: response.data.country,\n        lat: response.data.lat,\n        lon: response.data.lon\n      };\n  \n      // set the cityData state in App.js to the cityData object\n      props.setCityData(cityData);\n\n      // set the userInput to an empty string\n      setUserInput(\"\");\n\n    } catch(err) {\n      \n      console.log(err);\n\n      props.setHasError(true);\n\n    };\n    \n  };\n\n  return (\n    <main>\n      <form onSubmit={(event) => handleSubmit(event)} className='wrapper'> \n\n        <label className='visuallyHidden' htmlFor='city'>Enter a city</label>\n        <input id='city' value={userInput} type='text' placeholder='Enter City' onChange={(event) => setUserInput(event.target.value)} />\n\n        <label className='visuallyHidden' htmlFor='submit'>Search</label>\n        <input id='submit' type='submit' value='Search' />\n\n        <p>Enter a city to search for museums.</p>\n\n      </form>\n    </main>\n  )\n\n};\n\nexport default Form;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CityHeader = (props) => {\n\n  // state containing weather information from the Open Weather Map API\n  const [weatherData, setWeatherData] = useState({});\n\n  // deconstruct the cityData props passed from App.js\n  const { name, country, lat, lon } = props.cityData;\n\n  // async function called inside the useEffect hook\n  const getWeatherData = async () => {\n\n    // make an API request to get the weather data on the user inputted city\n    try {\n      const response = await axios({\n        url: 'https://api.openweathermap.org/data/2.5/weather',\n        method: 'GET',\n        responseType: 'JSON',\n        params: {\n          lat: lat,\n          lon: lon,\n          units: 'metric',\n          appid: process.env.REACT_APP_OWM_KEY,\n        }\n      });\n\n      // Rounds the temperature data to make it a whole number\n      const cityTemp = Math.round(response.data.main.temp);\n\n      // organize the needed data from the API response to an object\n      const weatherData = {\n        temp: cityTemp,\n        description: response.data.weather[0].main,\n      }\n\n      // set the weatherData state to the weatherData object\n      setWeatherData(weatherData);\n\n    } catch(err)  {\n\n      console.log(err);\n\n    };\n\n  };\n\n  // hook to make the API request everytime the name props updates\n  useEffect(() => {\n\n    getWeatherData();\n\n  }, [name]);\n\n  return (\n    <section>\n\n      <div className='cityInfo' id='cityInfoContainer'>\n\n        <p>Museums in</p>\n        <h2>{name}, {country}</h2>\n\n        <div className='weather'>\n          <p>{weatherData.temp} &#8451;</p>\n          <p>{weatherData.description}</p>\n        </div>\n\n      </div>\n\n    </section>\n  )\n  \n}\n\nexport default CityHeader;","// function for scrolling to sections of the page \nconst scrollToElement = (elementId) => {\n  document.getElementById(elementId)\n  .scrollIntoView({behavior: 'smooth'});\n}\n\nexport default scrollToElement;","import React from 'react';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport scrollToElement from './scrollToElement';\n\nconst CityMuseums = (props) => {\n\n  // state containing the museum objects from the Open Trip Map API\n  const [cityMuseums, setCityMuseums] = useState([]);\n\n  // deconstruct the cityData props\n  const { lon, lat } = props.cityData;\n\n  // async function called in the useEffect hook\n  const getMuseumsList = async () => {\n\n    // make the API request for the list of museums\n    try {\n      const response = await axios({\n        url: 'https://api.opentripmap.com/0.1/en/places/radius',\n        method: 'GET',\n        responseType: 'JSON',\n        params: {\n          radius: 100000,\n          lon: lon,\n          lat: lat,\n          kinds: 'museums',\n          rate: '3',\n          format: 'json',\n          limit: 20,\n          apikey: process.env.REACT_APP_OTM_KEY,\n        }\n      });\n\n      // create an empty array to push the API data into\n      const newCityMuseums = [];\n\n      // push each item in the API response.data array into the newCityMuseums array\n      newCityMuseums.push(...response.data);\n\n      // set the cityMuseums state to the newCityMuseums array\n      setCityMuseums(newCityMuseums);\n\n      // scroll to the #cityInfoContainer div\n      scrollToElement('cityInfoContainer');\n\n    } catch(err) {\n\n      console.log(err);\n\n      props.setHasError(true);\n\n    }\n\n  };\n\n  // function executed on click of a museum name\n  const getMuseumXid = (xid) => {\n\n    // hook passed as props from App.js component to set the xid state\n    props.setXid(xid);\n\n    // hook passed as props from the App.js component to toggle visibiliy of the MuseumDetails component\n    props.setIsHidden(false);\n\n  };\n\n  // hook to make the API request everytime the lat props updates\n  useEffect(() => {\n\n    getMuseumsList();\n\n  }, [lat]);\n\n  // make a copy of the cityMuseums state array to map over it\n  const cityMuseumsCopy = [...cityMuseums];\n\n  return (\n    <section className='museumsList wrapper'>\n\n      <ul>\n\n        {\n          cityMuseumsCopy.map( object => {\n\n            return (\n\n              <li key={object.xid}>\n                <span><i className='fas fa-landmark'></i></span><button type='button'  onClick={() => getMuseumXid(object.xid)}>{object.name}</button>\n              </li>\n\n            )\n\n          })\n        }\n\n      </ul>\n\n    </section>\n  )\n}\n\nexport default CityMuseums;","import React from 'react';\nimport CityHeader from './CityHeader';\nimport CityMuseums from './CityMuseums';\n\nconst CityData = (props) => {\n    return (\n      <>\n        <CityHeader cityData={props.cityData} />\n        <CityMuseums \n          cityData={props.cityData} \n          setXid={props.setXid} \n          setIsHidden={props.setIsHidden}\n          setHasError={props.setHasError}\n        />\n      </>\n    )\n  }\n\nexport default CityData;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n  // Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyCgo__XjZygSR0XWEphiMiwPuOjNxefH0Y\",\n    authDomain: \"museumfinder-3d651.firebaseapp.com\",\n    databaseURL: \"https://museumfinder-3d651.firebaseio.com\",\n    projectId: \"museumfinder-3d651\",\n    storageBucket: \"museumfinder-3d651.appspot.com\",\n    messagingSenderId: \"609226698076\",\n    appId: \"1:609226698076:web:a6cfa6c2f5a9d2c04ba599\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport firebase from '../firebase';\nimport scrollToElement from './scrollToElement';\n\nconst MuseumDetails = (props) => {\n\n  const [museumDetails, setMuseumDetails] = useState([]);\n\n  // async function called in the useEffect hook\n  const getMuseumDetails = async () => {\n\n    // make the API request for the details of the picked museum\n    try {\n      const response = await axios({\n        url: `https://api.opentripmap.com/0.1/en/places/xid/${props.xid}`,\n        method: 'GET',\n        responseType: 'JSON',\n        params: {\n          apikey: process.env.REACT_APP_OTM_KEY,\n        }\n      });\n\n      // create an empty array to push the API data into\n      const museumDetails = [];\n\n      // organize the needed API data into an object\n      const newMuseumDetails = {\n        address: response.data.address,\n        img: response.data.preview.source,\n        name: response.data.name,\n        siteUrl: response.data.url,\n        info: response.data.wikipedia_extracts.text,\n        xid: response.data.xid\n      };\n      \n      // push the newMuseumDetails object into the museumDetails array \n      museumDetails.push(newMuseumDetails);\n\n      // set the museumDetails state to the museumDetails array\n      setMuseumDetails(museumDetails);\n\n      // scroll to the #museumDetailsContainer section\n      scrollToElement('museumDetailsContainer');\n       \n    } catch(err) {\n\n      console.log(err);\n\n      props.setHasError(true);\n\n    };\n\n  };\n\n  // on click of the 'Go back to list' button\n  const backToList = () => {\n\n    // scroll back to the #cityInfoContainer div\n    scrollToElement('cityInfoContainer');\n    \n    // set the setIsHidden state to true after a second to hide the museum details\n    setTimeout(() => {\n      props.setIsHidden(true);\n    }, 1000);\n  }\n\n  // function adding the museum to the firebase database on \"Save Museum\" button click\n  const addMuseum = (event) => {\n\n    event.preventDefault();\n\n    // store the path to the database in a variable\n    const dbRef = firebase.database().ref();\n\n    // remove undefined or null object properties\n    const modObject = JSON.parse( JSON.stringify(...museumDetails));\n\n    // push each of the array item in the museumDetails state to firebase\n    dbRef.push(modObject);\n\n  }\n\n  // hook to make the API request everytime the xid props updates\n  useEffect(() => {\n\n    getMuseumDetails();\n\n  }, [props.xid]);\n\n  // make a copy of the museumDetails state array to map over it\n  const museumDetailsCopy = [...museumDetails];\n\n  return (\n    <section className='museumDetails' id='museumDetailsContainer'>\n\n      {\n        museumDetailsCopy.map(item => {\n\n          return (\n\n            <div className='wrapper museumContainer' key={item.xid}>\n\n              <div className='museumImg'>\n                <img src={item.img} alt={item.name}/>\n              </div>\n\n              <div className='museumInfo'>\n\n                <h3>{item.name}</h3>\n                <address>{item.address.house_number} {item.address.road}, {item.address.city}, {item.address.state}, {item.address.postcode} {item.address.country}</address>\n                <a href={item.siteUrl}>Visit {item.name}'s website</a>\n                <p>{item.info}\n                </p>\n\n                <button onClick={backToList} type='button'>Go back to list</button>\n\n                <button onClick={addMuseum} type='button'>Save museum</button>\n\n\n              </div>\n\n            </div>\n            \n          )\n\n        })\n      }\n\n    </section>\n  )\n}\n\nexport default MuseumDetails;","import React from 'react';\n\nconst ErrorMessage = (props) => {\n\n  // on click of the \"Close window\" button\n  const handleClick = () => {\n\n    // hide the error message\n    props.setHasError(false);\n    \n  }\n\n  return (\n    <div className='errorMessage'>\n      <p>Something went wrong.</p>\n      <p>Please try again.</p>\n      <button type='button' onClick={handleClick}>Close window</button>\n    </div>\n  );\n}\n\nexport default ErrorMessage;","import React from 'react';\n\nconst SavedModal = (props) => {\n\n  // function to close the modal\n  const closeModal = () => {\n\n    // set the museumDetails state in the Saved component to an empty array\n    props.setMuseumDetails([]);\n\n  }\n\n  return (\n\n    <>\n\n      {\n        props.museumDetails.map(item => {\n\n          return (\n\n            <div className='wrapper museumContainer savedMuseumDetails' key={item.key}>\n\n              <button onClick={closeModal} type='button'>X</button>\n\n              <div className='museumImg'>\n                <img src={item.data.img} alt={item.data.name}/>\n              </div>\n\n              <div className='museumInfo'>\n\n                <h3>{item.data.name}</h3>\n                <address>{item.data.address.house_number} {item.data.address.road}, {item.data.address.city}, {item.data.address.state}, {item.data.address.postcode} {item.data.address.country}</address>\n                <a href={item.data.siteUrl}>Visit {item.data.name}'s website</a>\n                <p>{item.data.info}\n                </p>\n\n              </div>\n\n            </div>\n            \n          )\n\n        })\n      }\n\n    </>\n  )\n\n};\n\nexport default SavedModal;","import React, { useState, useEffect } from 'react';\nimport firebase from '../firebase';\nimport SavedModal from './SavedModal';\n\nconst Saved = () => {\n\n  // State storing the museums object from the database. Set in the useEffect hook.\n  const [museums, setMuseums] = useState([]);\n\n  // State storing the details of the clicked museum card to render the modal.\n  const [museumDetails, setMuseumDetails] = useState([]);\n\n  // hook to pull database data on page load\n  useEffect(() => {\n\n    const dbRef = firebase.database().ref();\n\n    // event listener attached to the firebase database to listen for any value change\n    dbRef.on('value', response => {\n\n      // create an empty array to store database data into\n      const newMuseums = [];\n\n      // store object data from firebase in a variable\n      const data = response.val();\n\n      // loop through the returned database object\n      for (let key in data) {\n        \n        // and push each item into the newMuseums array\n        newMuseums.push({key: key, data: data[key]});\n        \n      };\n\n      // store the newMuseums array to the museums state\n      setMuseums(newMuseums);\n\n    });\n\n  }, []);\n\n  // make a copy of the museums state to map over it\n  const museumsCopy = [...museums];\n\n  // sets the museumDetails state with the details of the clicked museum card and renders the modal\n  const openModal = (xid) => {\n\n    // filters the museumsCopy array for the details of the clicked museum using the xid of the clicked museum card\n    const museumDetails = museumsCopy.filter( object => object.data.xid === xid );\n\n    // set the museumDetails state to the details object of the clicked museum card\n    setMuseumDetails(museumDetails);\n\n  };\n\n  // function to delete museum in the firebase database\n  const deleteMuseum = (firebaseKey) => {\n\n    // store the path to the database in the dbRef variable\n    const dbRef = firebase.database().ref();\n\n    // use the unique key from the database to delete the clicked museum\n    dbRef.child(firebaseKey).remove();\n\n  }\n\n  // copy of the museumDetails array\n  const museumDetailsCopy = [...museumDetails];\n\n  return (\n    <section className='saved' id='savedSection'>\n\n      <h2>Saved Museums</h2>\n\n      <ul className='wrapper'>\n\n        {\n          museumsCopy.map( object => {\n              return (\n                <li key={object.key}>\n\n                  <button className='delete' onClick={() => deleteMuseum(object.key)} type='button'>X</button>\n\n                  <button type='button' onClick={() => openModal(object.data.xid)}>\n                    <h3>{object.data.name}</h3> \n                    <p>{object.data.address.city}, {object.data.address.country_code.toUpperCase()} </p>\n                    <img src={object.data.img} alt={object.data.name}/>\n                  </button>\n                  \n                </li>\n              )\n          })\n        }\n\n      </ul>\n\n      <SavedModal museumDetails={museumDetailsCopy} setMuseumDetails={setMuseumDetails} />\n\n    </section>\n  )\n\n}\n\nexport default Saved;","import React from 'react';\nimport scrollToElement from './scrollToElement';\n\nconst Nav = (props) => {\n\n  const handleClick = () => {\n    props.setSavedIsHidden(props.savedIsHidden ? false : true);\n  };\n\n  return (\n    <nav className='savedNav'>\n      <a href='#savedSection' onClick={handleClick}>{props.savedIsHidden ? 'Saved Museums' : 'Close'}</a>\n    </nav>\n  )\n};\n\nexport default Nav;","import React, { useState } from 'react';\nimport Header from \"./Components/Header\";\nimport Form from './Components/Form';\nimport CityData from './Components/CityData';\nimport MuseumDetails from './Components/MuseumDetails';\nimport ErrorMessage from './Components/ErrorMessage';\nimport Saved from './Components/Saved';\nimport Nav from './Components/Nav';\n\nconst App = () => {\n\n  /* State storing data from the first API call in the Form component.\n     Passed as props to CityData sub-components (CityHeader & CityMuseums). */\n  const [cityData, setCityData] = useState({});\n\n  /* State holding the xid data from the CityMuseums component on click of the museum name on the list.\n     Passed as props to MuseumDetails component to be used for the API request. */\n  const [xid, setXid] = useState('');\n\n  /* State set to 'false' in the CityMuseums component on click of the museum name. Then set to 'true' in the MuseumDetails component on click of the 'Go back to list' button. Controlls visibility of the MuseumDetails component. */ \n  const [isHidden, setIsHidden] = useState(true);\n\n  /* State set to 'true' if error exists in each of the API requests. Then set to 'false' on click of the 'Close Window' button in the ErrorMessage component.  \n  Controls visibility of the ErrorMessage component. */ \n  const [hasError, setHasError] = useState(false);\n\n  /* Toggles the visibility of the Saved component. Passed to the Nav component as props and changed on click of the anchor */\n  const [savedIsHidden, setSavedIsHidden] = useState(true);\n\n    return (\n      <>\n        <Nav \n          savedIsHidden={savedIsHidden} \n          setSavedIsHidden={setSavedIsHidden}\n        />\n        <Header />\n        <Form setCityData={setCityData} setHasError={setHasError} />\n        {\n          cityData.name\n          ? <CityData \n              cityData={cityData} \n              setXid={setXid} \n              setIsHidden={setIsHidden}\n              setHasError={setHasError}\n            />\n          :null\n        }\n        {\n          !isHidden\n          ? <MuseumDetails \n          xid={xid} \n          setIsHidden={setIsHidden}\n          setHasError={setHasError}\n          />\n          : null\n        }\n        {\n          !savedIsHidden\n          ? <Saved />\n          : null          \n        }\n        {\n          hasError\n          ? <ErrorMessage setHasError={setHasError} />\n          : null\n        }\n      </>\n    );\n    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}